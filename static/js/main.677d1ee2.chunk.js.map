{"version":3,"sources":["features/counter/Counter.module.css","features/stopwatch/Stopwatch.module.css","app/hooks.ts","features/counter/counterAPI.ts","features/counter/counterSlice.ts","features/counter/Counter.tsx","features/stopwatch/stopwatchSlice.ts","features/stopwatch/stopwatchAPI.ts","features/stopwatch/Stopwatch.tsx","features/timer/timerSlice.ts","features/timer/timerAPI.ts","features/timer/Timer.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx","features/timer/Timer.module.css"],"names":["module","exports","useAppDispatch","useDispatch","useAppSelector","useSelector","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","selectCount","counter","Counter","count","dispatch","useState","incrementAmount","setIncrementAmount","incrementValue","Number","className","styles","row","button","onClick","column","textbox","onChange","e","target","asyncButton","getState","Math","abs","stopwatchSlice","minutes","seconds","running","startStop","reset","Stopwatch","stopwatch","Clock","decrementAsync","timerSlice","curTime","hours","setting","ringing","setTimer","stopResume","deleteTimer","newCurTime","Object","assign","Timer","timer","inputMinute","setInputMinute","inputSecond","setInputSecond","audio","Audio","timeFormatHelper","purpose","mins","parseInt","secs","isNaN","totalTime","obj","floor","pause","alert","deleteTimerHelper","loop","play","id","maxLength","autoComplete","Ring","App","activeClassName","exact","to","path","component","store","configureStore","reducer","counterReducer","stopwatchReducer","timerReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.677d1ee2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__1C_4f\",\"column\":\"Counter_column__ROwHq\",\"value\":\"Counter_value__1d0te\",\"textbox\":\"Counter_textbox__3ODaX\",\"button\":\"Counter_button__1xpSV\",\"asyncButton\":\"Counter_asyncButton__2UAr3 Counter_button__1xpSV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Stopwatch\":\"Stopwatch_Stopwatch__1_I4G\",\"Clock\":\"Stopwatch_Clock__3f9yy\",\"row\":\"Stopwatch_row__1z5lR\",\"button\":\"Stopwatch_button__24UmG\"};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = Math.abs(selectCount(getState()));\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { useState } from 'react';\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport {\n  decrement,\n  increment,\n  incrementByAmount,\n  incrementAsync,\n  incrementIfOdd,\n  selectCount,\n} from './counterSlice';\nimport styles from './Counter.module.css';\n\nexport function Counter() {\n  const count = useAppSelector(selectCount);\n  const dispatch = useAppDispatch();\n  const [incrementAmount, setIncrementAmount] = useState('1');\n\n  const incrementValue = Number(incrementAmount) || 0;\n\n  return (\n    <div>\n      <div className={styles.row}>\n        <button\n          className={styles.button}\n          aria-label=\"Decrement value\"\n          onClick={() => dispatch(decrement())}\n        >\n          -\n        </button>\n        <span className={styles.value}>{count}</span>\n        <button\n          className={styles.button}\n          aria-label=\"Increment value\"\n          onClick={() => dispatch(increment())}\n        >\n          +\n        </button>\n      </div>\n      <div className={styles.column}>\n        <input\n          className={styles.textbox}\n          aria-label=\"Set increment amount\"\n          value={incrementAmount}\n          onChange={(e) => setIncrementAmount(e.target.value)}\n        />\n        <button\n          className={styles.button}\n          onClick={() => dispatch(incrementByAmount(incrementValue))}\n        >\n          Add Amount\n        </button>\n        <button\n          className={styles.asyncButton}\n          onClick={() => dispatch(incrementAsync(incrementValue))}\n        >\n          Add Async\n        </button>\n        <button\n          className={styles.button}\n          onClick={() => dispatch(incrementIfOdd(incrementValue))}\n        >\n          Add If Odd\n        </button>\n      </div>\n    </div>\n  );\n}\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { delaySecond } from './stopwatchAPI';\n\n\nexport const incrementAsync = createAsyncThunk('stopwatch/delaySecond',\n  async () => {\n    await delaySecond();\n    return;\n  }\n);\n\nexport const stopwatchSlice = createSlice({\n\n  name: 'stopwatch',\n  initialState: {\n    minutes: 0,\n    seconds: 0,\n    running: false,\n  },\n\n  reducers: {\n    startStop: (state) => {\n      state.running = !state.running;\n    },\n    reset: (state) => {\n      state.running = false;\n      state.minutes = 0;\n      state.seconds = 0;\n    },\n  },\n\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.fulfilled, (state) => {\n        if (state.running) {\n          state.seconds += 1;\n          if (state.seconds === 60) {\n            state.seconds = 0;\n            state.minutes += 1;\n          }\n        }\n      });\n  },\n});\n\nexport const { startStop, reset } = stopwatchSlice.actions;\n\nexport default stopwatchSlice.reducer;\n","// An async request for time delayed by a second\nexport function delaySecond () {\n  return new Promise<{}>((resolve) =>\n    setTimeout(() => resolve({}), 1000)\n  );\n}\n","import { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { startStop, reset } from './stopwatchSlice';\nimport styles from './Stopwatch.module.css';\nimport { incrementAsync } from './stopwatchSlice';\n\n\nfunction Stopwatch () {\n\n  const minutes = useAppSelector( (state) => state.stopwatch.minutes);\n  const seconds = useAppSelector( (state) => state.stopwatch.seconds);\n  const running = useAppSelector( (state) => state.stopwatch.running);\n  const dispatch = useAppDispatch();\n\n  if (running) {\n    dispatch(incrementAsync());\n  }\n\n\n  return (\n    <div className={styles.Stopwatch}>\n      <div className={styles.Clock}>\n        <div>{minutes < 10 && '0'}{minutes}:{seconds < 10 && '0'}{seconds}</div>\n      </div>\n      <div className={styles.row}>\n        <button\n          className={styles.button}\n          aria-label=\"Reset Stopwatch\"\n          onClick={() => dispatch(reset())}\n        >\n          Reset\n        </button>\n        <button\n          className={styles.button}\n          aria-label=\"Start/Stop Stopwatch\"\n          onClick={() => dispatch(startStop())}\n        >\n          {running ? \"Stop\" : \"Start\"}\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Stopwatch;","import { createSlice, createAsyncThunk, PayloadAction } from \"@reduxjs/toolkit\";\nimport { delaySecond } from \"./timerAPI\";\n\n\nexport interface TimeSet {\n  hours: number;\n  minutes: number;\n  seconds: number;\n}\n\nexport const decrementAsync = createAsyncThunk('timer/delaySecond',\n  async () => {\n    await delaySecond();\n    return;\n  }\n);\n\n\nconst timerSlice = createSlice({\n\n  name: 'timer',\n  initialState: {\n    curTime: {\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n    },\n    setting: true,\n    running: false,\n    ringing: false,\n  },\n\n  reducers: {\n    setTimer: (state, action: PayloadAction<TimeSet>) => {\n      state.setting = false;\n      state.running = true;\n      state.curTime = {\n        hours: action.payload.hours,\n        minutes: action.payload.minutes,\n        seconds: action.payload.seconds,\n      }\n    },\n    stopResume: (state) => {\n      state.running = !state.running;\n    },\n    deleteTimer: (state) => {\n      state.setting = true;\n      state.running = false;\n      state.ringing = false;\n      state.curTime = {\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n      };\n    },\n    reset: (state, action: PayloadAction<TimeSet>) => {\n      state.running = false;\n      state.ringing = false;\n      state.curTime = {\n        hours: action.payload.hours,\n        minutes: action.payload.minutes,\n        seconds: action.payload.seconds,\n      }\n    },\n\n  },\n\n  extraReducers: (builder) => {\n    builder\n      .addCase(decrementAsync.fulfilled, (state) => {\n        if (state.running) {\n          let newCurTime = Object.assign({}, state.curTime);\n          if (state.curTime.seconds === 0) {\n            if (state.curTime.minutes === 0) {\n              if (state.curTime.hours !== 0) {\n                newCurTime.hours -= 1;\n                newCurTime.minutes = 59;\n                newCurTime.seconds = 59;\n              }\n            }\n            else {\n              newCurTime.minutes -= 1;\n              newCurTime.seconds = 59;\n            }\n          }\n          else {\n            newCurTime.seconds -= 1;\n          }\n\n          if (state.curTime.seconds === 1 && state.curTime.minutes === 0 && state.curTime.hours === 0) {\n            newCurTime.seconds = 0;\n            state.running = false;\n            state.ringing = true;\n          }\n\n          state.curTime = newCurTime;\n        }\n      });\n  }\n});\n\nexport const { setTimer, stopResume, deleteTimer, reset} = timerSlice.actions;\n\nexport default timerSlice.reducer;","// An async request to delay time by a second\nexport function delaySecond () {\n  return new Promise<{}>((resolve) =>\n    setTimeout(() => resolve({}), 1000)\n  );\n}","import { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { useState } from 'react';\nimport { stopResume, deleteTimer, reset, setTimer } from './timerSlice';\nimport { decrementAsync } from './timerSlice';\nimport styles from './Timer.module.css';\n\n\nfunction Timer () {\n\n  const curTime = useAppSelector( (state) => state.timer.curTime);\n  const setting = useAppSelector( (state) => state.timer.setting);\n  const running = useAppSelector( (state) => state.timer.running);\n  const ringing = useAppSelector( (state) => state.timer.ringing);\n  const [inputMinute, setInputMinute] = useState('');\n  const [inputSecond, setInputSecond] = useState('');\n  const dispatch = useAppDispatch();\n\n  const audio = new Audio(\"https://assets.coderrocketfuel.com/pomodoro-times-up.mp3\");\n  audio.loop = true;\n\n\n  // validate input for timer\n  function timeFormatHelper (purpose: string) {\n    let mins = parseInt(inputMinute);\n    let secs = parseInt(inputSecond);\n\n    if (isNaN(mins)) {  // timer valid if minutes is empty and seconds is non-empty\n      mins = 0;\n    }\n    if ((mins >= 0 && secs >= 0) && (mins > 0 || secs > 0) && (mins <= 99 && secs <= 99)) {\n      let totalTime = mins*60 + secs;\n      let obj = {\n        hours: Math.floor(totalTime / 3600),\n        minutes: Math.floor(totalTime / 60) % 60,\n        seconds: totalTime % 60,\n      };\n      if (purpose === 'Start') {\n        dispatch(setTimer(obj));\n      }\n      else if (purpose === 'Reset') {\n        audio.pause();\n        dispatch(reset(obj));\n      }\n    }\n    else {\n      alert('Valid values for timer: 0 <= m <= 99 and 0 < s <= 99');\n    }\n  }\n\n  // clear inputs\n  function clearInput () {\n    setInputMinute('');\n    setInputSecond('');\n  }\n\n  function deleteTimerHelper () {\n    audio.pause();\n    dispatch(deleteTimer());\n    clearInput();\n  }\n\n  if (ringing) {\n    audio.loop = true;\n    audio.play();\n  }\n\n  if (running) {\n    dispatch(decrementAsync());\n  }\n  \n  return (\n    <div className='Timer'>\n      {setting && <div className={styles.row}>\n        <input\n          className={styles.textbox}\n          id='minutes'\n          maxLength={2}\n          aria-label=\"Set minutes\"\n          value={inputMinute}\n          autoComplete='off'\n          onChange={(e) => setInputMinute(e.target.value)}\n        /> m\n        <input\n          className={styles.textbox}\n          id='seconds'\n          maxLength={2}\n          aria-label=\"Set seconds\"\n          value={inputSecond}\n          autoComplete='off'\n          onChange={(e) => setInputSecond(e.target.value)}\n        /> s\n      </div>}\n      {!setting && \n        <div className={styles.Clock}>\n          <div className={ringing ? styles.Ring : ''}>\n            {curTime.hours}:{curTime.minutes < 10 && '0'}{curTime.minutes}:{curTime.seconds < 10 && '0'}{curTime.seconds}\n          </div>\n        </div>\n      }\n      <div className={styles.row}>\n        {!setting &&\n          <button\n            className={styles.button}\n            aria-label=\"Delete Timer\"\n            onClick={() => deleteTimerHelper()}\n          >\n            Delete\n          </button>\n        }\n        {setting &&\n          <button\n            className={styles.button}\n            aria-label=\"Start Timer\"\n            onClick={() => timeFormatHelper('Start')}\n          >\n            Start\n          </button>\n        }\n        {!setting && !ringing &&\n          <button\n            className={styles.button}\n            aria-label=\"Stop/Resume Timer\"\n            onClick={() => dispatch(stopResume())}\n          >\n            {running ? \"Stop\" : \"Resume\"}\n          </button>\n        }\n        {!setting &&\n          <button\n            className={styles.button}\n            aria-label=\"Reset Timer\"\n            onClick={() => timeFormatHelper('Reset')}\n          >\n            Reset\n          </button>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default Timer;","import {\n\tRoute,\n  NavLink\n} from 'react-router-dom';\nimport { Counter } from './features/counter/Counter';\nimport Stopwatch from './features/stopwatch/Stopwatch';\nimport Timer from './features/timer/Timer';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div id=\"Navbar\">\n        <div><NavLink className='navlink' activeClassName='selectedLink' exact to='/'>Counter</NavLink></div>\n        <div><NavLink className='navlink' activeClassName='selectedLink' to='/Stopwatch'>Stopwatch</NavLink></div>\n        <div><NavLink className='navlink' activeClassName='selectedLink' to='/Timer'>Timer</NavLink></div>\n      </div>\n      <div id='Container'>\n        <Route exact path='/' component={ Counter } />\n        <Route exact path='/Stopwatch' component={ Stopwatch } />\n        <Route exact path='/Timer' component={ Timer } />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport stopwatchReducer from '../features/stopwatch/stopwatchSlice';\nimport timerReducer from '../features/timer/timerSlice';\n\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    stopwatch: stopwatchReducer,\n    timer: timerReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Timer\":\"Timer_Timer__1SGCF\",\"row\":\"Timer_row__1-N5i\",\"textbox\":\"Timer_textbox__1gabg\",\"button\":\"Timer_button__1TcV9\",\"Clock\":\"Timer_Clock__1bda8\",\"Ring\":\"Timer_Ring__3HeV3\",\"blinker\":\"Timer_blinker__dXlVN\"};"],"sourceRoot":""}